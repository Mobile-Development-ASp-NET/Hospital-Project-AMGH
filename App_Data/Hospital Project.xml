<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hospital Project</name>
    </assembly>
    <members>
        <member name="M:Hospital_Project.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:Hospital_Project.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:Hospital_Project.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:Hospital_Project.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:Hospital_Project.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:Hospital_Project.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:Hospital_Project.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,Hospital_Project.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,Hospital_Project.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:Hospital_Project.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},Hospital_Project.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:Hospital_Project.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:Hospital_Project.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.#ctor(Hospital_Project.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Hospital_Project.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,Hospital_Project.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Hospital_Project.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:Hospital_Project.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hospital_Project.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:Hospital_Project.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:Hospital_Project.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Hospital_Project.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionController.GetApplicationCookie">
            <summary>
            Grabs the authentication cookie sent to this controller.
            For proper WebAPI authentication, you can send a post request with login credentials to the WebAPI and log the access token from the response. The controller already knows this token, so we're just passing it up the chain.
            
            Here is a descriptive article which walks through the process of setting up authorization/authentication directly.
            https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/individual-accounts-in-web-api
            </summary>
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionController.List">
            <summary>
            objective: communicate with our Admission data api to retrieve a list of Admissions
            curl https://localhost:44342/api/Admissiondata/listAdmissions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionController.Details(System.Int32)">
            <summary>
            objective: communicate with our Admission data api to retrieve one Admission
            curl https://localhost:44342/api/Admissiondata/findAdmission/{id}
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionController.New">
            <summary>
            
            </summary>
            <returns></returns>
            GET: Admission/New
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionController.Create(Hospital_Project.Models.Admission)">
            <summary>
            To create an admission in to the database
            </summary>
            <param name="Admission"></param>
            <returns></returns>
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionController.Edit(System.Int32)">
            <summary>
            To edit the admission details
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionController.Update(System.Int32,Hospital_Project.Models.Admission)">
            <summary>
            To update the admission details into the system
            </summary>
            <param name="id"></param>
            <param name="Admission"></param>
            <returns></returns>
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionController.DeleteConfirm(System.Int32)">
            <summary>
            To confirm the delete
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionDataController.ListAdmissions">
            <summary>
            Returns all Admissions in the system.
            </summary>
            <returns>
            HEADER: 200 (OK)
            CONTENT: all Admissions in the database, including their associated doctors and username.
            </returns>
            <example>
            GET: api/AdmissionData/ListAdmissions
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionDataController.ListAdmissionsForDoctor(System.Int32)">
            <summary>
            Gathers information about all admissions related to a particular dr id
            </summary>
            <returns>
            HEADER: 200 (OK)
            CONTENT: all admissions in the database, including their associated doctors matched with a particular dr ID
            </returns>
            <param name="id">Admission Id.</param>
            <example>
            GET: api/GreetingCardData/ListAdmissionssForDotor/3
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionDataController.FindAdmission(System.Int32)">
            <summary>
            Returns a particular admission  in the system.
            </summary>
            <returns>
            HEADER: 200 (OK)
            CONTENT: An Admission in the system matching up to the Admission ID primary key
            or
            HEADER: 404 (NOT FOUND)
            </returns>
            <param name="id">The primary key of the Admissions</param>
            <example>
            GET: api/AdmissionData/FindAdmission/5
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionDataController.UpdateAdmission(System.Int32,Hospital_Project.Models.Admission)">
            <summary>
            Updates a particular Admission in the system with POST Data input
            </summary>
            <param name="id">Represents the Admission ID primary key</param>
            <param name="Admission">JSON FORM DATA of an Admissions</param>
            <returns>
            HEADER: 204 (Success, No Content Response)
            or
            HEADER: 400 (Bad Request)
            or
            HEADER: 404 (Not Found)
            </returns>
            <example>
            POST: api/AdmissionData/UpdateAdmission/5
            FORM DATA: Admission JSON Object
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionDataController.AddAdmission(Hospital_Project.Models.Admission)">
            <summary>
            Adds an Admission to the system
            </summary>
            <param name="Admission">JSON FORM DATA of an Admission</param>
            <returns>
            HEADER: 201 (Created)
            CONTENT: Admission ID, Admission Data
            or
            HEADER: 400 (Bad Request)
            </returns>
            <example>
            POST: api/AdmissionData/AddAdmission
            FORM DATA: Admission JSON Object
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.AdmissionDataController.DeleteAdmission(System.Int32)">
            <summary>
            Deletes an Admission from the system by it's ID.
            </summary>
            <param name="id">The primary key of the Admission</param>
            <returns>
            HEADER: 200 (OK)
            or
            HEADER: 404 (NOT FOUND)
            </returns>
            <example>
            POST: api/AdmissionData/DeleteAdmission/5
            FORM DATA: (empty)
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.ApplicationController.List">
            <summary>
            Grabs the authentication cookie sent to this controller.
            </summary> 
            Not needed for MVP but will be for the final portion
        </member>
        <member name="M:Hospital_Project.Controllers.ApplicationDataController.ListApplications">
            <summary>
            Admin will view the list of applications, and see what status they have.
            </summary>
            <returns>
            HEADER: 200 OK
            Content: all applications that were submitted 
            </returns>
            <example>
            GET: api/ApplicationData/ListApplications
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.ApplicationDataController.ListApplicationsForPosition(System.Int32)">
            <summary>
            List Applications that are related to a specific position id
            </summary>
            <param name="id">Positions id</param>
            <returns>
            HEADER 200 OK
            CONTENT: all applications in the database, including the positions that are matched with a particular position id
            </returns>
            <example>
            GET: api/ApplicationData/ListApplicationsForPositions/5
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.ApplicationDataController.FindApplication(System.Int32)">
            <summary>
            Finds an application base on ID
            </summary>
            <param name="id">primary key of the application</param>
            <returns>
            HEADER: 200 OK
            OR
            HEADER 404 NOT FOUND
            </returns>
            <example>
            GET: api/ApplicationData/FindApplication/5
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.ApplicationDataController.UpdateApplication(System.Int32,Hospital_Project.Models.Application)">
            <summary>
            Admin updates the status of the application
            </summary>
            <param name="id">Application Id</param>
            <param name="application">JSON Form DATA of an application</param>
            <returns>
            HEADER 204 : Success No content request
            or
            HEADER 400 : Bad Request
            or
            HEADER 404 : Not Found
            </returns>
            <example>
            POST: api/ApplicationData/UpdateApplication/5
            FORM DATA: Application JSON Data
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.ApplicationDataController.AddApplication(Hospital_Project.Models.Application)">
            <summary>
            Adds an application to the system
            </summary>
            <param name="application">JSON FORM DATA of an application</param>
            <returns>
            HEADER 201 : Created
            CONTENT : Application ID, Application Data
            or
            HEADER 400 : Bad Request
            </returns>
            <example>
            POST: api/ApplicationData/AddApplication
            FORM DATA: Application JSON Object
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.ApplicationDataController.DeleteApplication(System.Int32)">
            <summary>
            Deletes an Application from the system by it's ID.
            </summary>
            <param name="id">The primary key of the application</param>
            <returns>
            HEADER 200 : Ok 
            or
            HEADER 404 : Not Found
            </returns>
            <example>
            POST: api/ApplicationData/DeleteApplication/1
            FORM DATA: Empty
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.BlogController.GetApplicationCookie">
            <summary>
            Grabs the authentication cookie sent to this controller.
            </summary>
        </member>
        <member name="M:Hospital_Project.Controllers.DepartmentDataController.ListDepartments">
            <summary>
            To list all the departments.
            </summary>
            <returns>A list of all departments.</returns>
        </member>
        <member name="M:Hospital_Project.Controllers.DepartmentDataController.FindDepartment(System.Int32)">
            <summary>
            Finds a particular department detail with the help of id.
            </summary>
            <param name="id">Department Id</param>
            <returns>A sepcific Department.</returns>
        </member>
        <member name="M:Hospital_Project.Controllers.DoctorDetailsDataController.ListDoctorDetails">
            <summary>
            List of all the doctors along with their respective departments.
            </summary>
            <returns>List of Doctors.</returns>
        </member>
        <member name="M:Hospital_Project.Controllers.DoctorDetailsDataController.FindDoctorDetail(System.Int32)">
            <summary>
            Finds a Doctor with specific Id.
            </summary>
            <param name="id">Doctor Id</param>
            <returns>A specific doctor details</returns>
        </member>
        <member name="M:Hospital_Project.Controllers.DoctorDetailsDataController.AddDoctor(Hospital_Project.Models.DoctorDetails)">
            <summary>
            Adds a new Doctor to the database.
            </summary>
            <param name="doctorDetails"></param>
            <returns></returns>
        </member>
        <member name="M:Hospital_Project.Controllers.FeedbackDataController.ListFeedbacks">
            <summary>
            Returns all Feedbacks in the system.
            </summary>
            <returns>
            HEADER: 200 (OK)
            CONTENT: all Feedbacks in the database, including their associated doctors and username.
            </returns>
            <example>
            GET: api/FeedbackData/ListFeedbacks
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.FeedbackDataController.FindFeedback(System.Int32)">
            <summary>
            Returns a particular Feedback in the system.
            </summary>
            <returns>
            HEADER: 200 (OK)
            CONTENT: A Feedback in the system matching up to the Feedback ID primary key
            or
            HEADER: 404 (NOT FOUND)
            </returns>
            <param name="id">The primary key of the Feedback</param>
            <example>
            GET: api/FeedbackData/FindFeedback/3
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.FeedbackDataController.PutFeedback(System.Int32,Hospital_Project.Models.Feedback)">
            <summary>
            Updates a particular Feedback in the system with POST Data input
            </summary>
            <param name="id">Represents the Feedback ID primary key</param>
            <param name="Feedback">JSON FORM DATA of a Feedback</param>
            <returns>
            HEADER: 204 (Success, No Content Response)
            or
            HEADER: 400 (Bad Request)
            or
            HEADER: 404 (Not Found)
            </returns>
            <example>
            POST: api/FeedbackData/UpdateFeedback/3
            FORM DATA: Feedback JSON Object
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.FeedbackDataController.AddFeedback(Hospital_Project.Models.Feedback)">
            <summary>
            Adds a Feedback to the system
            </summary>
            <param name="Feedback">JSON FORM DATA of a Feedback</param>
            <returns>
            HEADER: 201 (Created)
            CONTENT: Feedback ID, Feedback Data
            or
            HEADER: 400 (Bad Request)
            </returns>
            <example>
            POST: api/FeedbackData/Feedback
            FORM DATA: Feedback JSON Object
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.FeedbackDataController.DeleteFeedback(System.Int32)">
            <summary>
            Deletes a Feedback from the system by it's ID.
            </summary>
            <param name="id">The primary key of the Feedback</param>
            <returns>
            HEADER: 200 (OK)
            or
            HEADER: 404 (NOT FOUND)
            </returns>
            <example>
            POST: api/FeedbackData/DeleteFeedback/3
            FORM DATA: (empty)
            </example>
        </member>
        <member name="T:Hospital_Project.Controllers.GreetingCardController">
            <summary>
            A controller for the greeting card to connect the datacontroller to the view
            </summary>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardController.GetApplicationCookie">
            <summary>
            Grabs the authentication cookie sent to this controller.
            For proper WebAPI authentication, you can send a post request with login credentials to the WebAPI and log the access token from the response. The controller already knows this token, so we're just passing it up the chain.
            
            Here is a descriptive article which walks through the process of setting up authorization/authentication directly.
            https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/individual-accounts-in-web-api
            </summary>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardController.List(System.Int32)">
             <summary>
             To list out all the greeting cards( to connect it to the list method and the list view)
             </summary>
             <param name="PageNum"></param>
             <returns></returns>
             objective: communicate with our greeting card data api to retrieve a list of greeting cards
            curl https://localhost:44342/api/greetingcarddata/listgreetingcards
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardController.Details(System.Int32)">
            <summary>
            objective: communicate with our GreetingCard data api to retrieve one GreetingCard
            </summary>
            <param name="id"></param>
            <returns></returns>
            GET: GreetingCard/Details/5
            curl https://localhost:44342/api/greetingcarddata/findgreetingcard/{id}
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardController.Error">
            <summary>
            to view the custom error messages
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardController.New">
            <summary>
            to create new greeting cards (generate all the admissions in the system to choose from)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardController.Create(Hospital_Project.Models.GreetingCard)">
            <summary>
            create new greeting card
            </summary>
            <param name="GreetingCard"></param>
            <returns></returns>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardController.Edit(System.Int32)">
            <summary>
            to update the greeting cards The update functionality is only for admin.
            If the user wants to update they can reach out the admin for updating
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardController.Update(System.Int32,Hospital_Project.Models.GreetingCard,System.Web.HttpPostedFileBase)">
            <summary>
            to update the greeting card
            </summary>
            <param name="id"></param>
            <param name="GreetingCard"></param>
            <param name="GreetingCardPic"></param>
            <returns></returns>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardController.DeleteConfirm(System.Int32)">
            <summary>
            to delete the greeting card a confirmation message
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardController.Delete(System.Int32)">
            <summary>
            delete the greeting card from the database
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Hospital_Project.Controllers.GreetingCardDataController">
            <summary>
            Greeting Data Controller that contains all the functions for the CRUD
            </summary>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardDataController.ListGreetingCards">
            <summary>
            Returns all greeting cards in the system.
            </summary>
            <returns>
            HEADER: 200 (OK)
            CONTENT: all greeting card details in the database, including their associated patients.
            </returns>
            <example>
            GET: api/GreetingCardData/ListGreetingCards
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardDataController.ListGreetingCardsPage(System.Int32,System.Int32)">
            <summary>
            Returns all greeting cards in the system.
            </summary>
            <returns>
            HEADER: 200 (OK)
            CONTENT: all greeting card details in the database, including their associated patients.
            </returns>
            <example>
            GET: api/GreetingCardData/ListGreetingCards
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardDataController.ListGreetingCardsForAdmission(System.Int32)">
            <summary>
            Gathers information about all GreetingCards related to a particular admissions id
            </summary>
            <returns>
            HEADER: 200 (OK)
            CONTENT: all GreetingCards in the database, including their associated admissions matched with a particular admissions ID
            </returns>
            <param name="id">Admission Id.</param>
            <example>
            GET: api/GreetingCardData/ListGreetingCardsForAdmission/3
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardDataController.FindGreetingCard(System.Int32)">
            <summary>
            Returns GreetingCard of a particular id in the system.
            </summary>
            <returns>
            HEADER: 200 (OK)
            CONTENT: A GreetingCard in the system matching up to the CardId primary key
            or
            HEADER: 404 (NOT FOUND)
            </returns>
            <param name="id">The primary key of the GreetingCard</param>
            <example>
            GET: api/GreetingCardData/FindGreetingCard/5
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardDataController.UpdateGreetingCard(System.Int32,Hospital_Project.Models.GreetingCard)">
            <summary>
            Updates a particular GreetingCard in the system with POST Data input
            </summary>
            <param name="id">Represents the Card Id primary key</param>
            <param name="GreetingCard">JSON FORM DATA of an GreetingCard</param>
            <returns>
            HEADER: 204 (Success, No Content Response)
            or
            HEADER: 400 (Bad Request)
            or
            HEADER: 404 (Not Found)
            </returns>
            <example>
            POST: api/GreetingCardData/UpdateGreetingCard/5
            FORM DATA: GreetingCard JSON Object
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardDataController.UploadGreetingCardPic(System.Int32)">
            <summary>
            Receives GreetingCard picture data, uploads it to the webserver and updates the GreetingCard's HasPic option
            </summary>
            <param name="id">the Card id</param>
            <returns>status code 200 if successful.</returns>
            <example>
            curl -F GreetingCardpic=@file.jpg "https://localhost:xx/api/GreetingCarddata/uploadGreetingCardpic/2"
            POST: api/GreetingCardData/UpdateGreetingCardPic/3
            HEADER: enctype=multipart/form-data
            FORM-DATA: image
            </example>
            https://stackoverflow.com/questions/28369529/how-to-set-up-a-web-api-controller-for-multipart-form-data
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardDataController.AddGreetingCard(Hospital_Project.Models.GreetingCard)">
            <summary>
            Adds an GreetingCard to the system
            </summary>
            <param name="GreetingCard">JSON FORM DATA of an GreetingCard</param>
            <returns>
            HEADER: 201 (Created)
            CONTENT: Card Id, GreetingCard Data
            or
            HEADER: 400 (Bad Request)
            </returns>
            <example>
            POST: api/GreetingCardData/AddGreetingCard
            FORM DATA: GreetingCard JSON Object
            </example>
        </member>
        <member name="M:Hospital_Project.Controllers.GreetingCardDataController.DeleteGreetingCard(System.Int32)">
            <summary>
            Deletes an GreetingCard from the system by it's ID.
            </summary>
            <param name="id">The primary key of the GreetingCard</param>
            <returns>
            HEADER: 200 (OK)
            or
            HEADER: 404 (NOT FOUND)
            </returns>
            <example>
            POST: api/GreetingCardData/DeleteGreetingCard/5
            FORM DATA: (empty)
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Hospital_Project.Controllers.PositionDataController.ListPositions" -->
        <!-- Badly formed XML comment ignored for member "M:Hospital_Project.Controllers.PositionDataController.ListPostionsForDepartment(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Hospital_Project.Controllers.PositionDataController.FindPosition(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:Hospital_Project.Controllers.PositionDataController.UpdatePosition(System.Int32,Hospital_Project.Models.Position)" -->
        <!-- Badly formed XML comment ignored for member "M:Hospital_Project.Controllers.PositionDataController.AddPosition(Hospital_Project.Models.Position)" -->
        <!-- Badly formed XML comment ignored for member "M:Hospital_Project.Controllers.PositionDataController.DeletePosition(System.Int32)" -->
        <member name="M:Hospital_Project.Controllers.QuestionDataController.ListQuestions">
            Objective: Create a method that allow us to return all questions from the database
             <summary>
             return all questions from the database
             </summary>
             <returns>List of questions in the database</returns>
             <example>GET: api/QuestionData/ListQuestions</example>
        </member>
        <member name="M:Hospital_Project.Controllers.QuestionDataController.ListQuestionsForSurvey(System.Int32)">
            Objective: Create a method that allow us to return all questions that are related to the selected survey
            by entering a interger value of the selected survey id
             <summary>
             Return all questions that are related to the survey from the database
             </summary>
             <param name="id">surveyID</param>
             <returns>List of questions that are related to the selected survey</returns>
            <example>GET: api/QuestionData/ListQuestionsForSurvey</example>
        </member>
        <member name="M:Hospital_Project.Controllers.QuestionDataController.FindQuestion(System.Int32)">
            Objective: Create a method that allow us to return the selected question by entering a interger value of the selected question id
             <summary>
             Return the selected the question from the database
             </summary>
             <param name="id">questionID</param>
             <return>The selected question</return>
            <example>GET: api/QuestionData/FindQuestion/{id}</example>
        </member>
        <member name="M:Hospital_Project.Controllers.QuestionDataController.UpdateQuestion(System.Int32,Hospital_Project.Models.Question)">
            Objective: Create a method that allow us to access the selected question by entering a interger value of the selected question id
            Then Update the selected question with JSON form data of the question  model 
             <summary>
             Update the selected question  from the database
             </summary>
             <param name="id">question ID</param>
             <param name="question">question JSON form data</param>
             <returns>
             HEADER: 204 (Success, No Content Response)
             or
             HEADER: 400 (Bad Request)
             or
             HEADER: 404 (Not Found)
             </returns>
            <example>POST: api/QuestionData/UpdateQuestion/{id}</example>
        </member>
        <member name="M:Hospital_Project.Controllers.QuestionDataController.AddQuestion(Hospital_Project.Models.Question)">
            Objective: Create a method that allow us to add a new question by JSON form data of the question model into the database 
             <summary>
             Add a new question into the database
             </summary>
             <param name="question">question JSON form data</param>
             <returns>
             HEADER: 204 (Success, No Content Response)
             or
             HEADER: 400 (Bad Request)
             </returns>
            <example>POST: api/QuestionData/AddQuestion</example>
        </member>
        <member name="M:Hospital_Project.Controllers.QuestionDataController.DeleteQuestion(System.Int32)">
            Objective: Create a method that allow us to delete the selected question by entering a interger value of the selected question id
             <summary>
             Remove the selected the question from the database
             </summary>
             <param name="id">questionID</param>
             <returns>
             HEADER: 200 (OK)
             or
             HEADER: 404 (NOT FOUND)
             </returns>
            <example>POST: api/QuestionData/DeleteQuestion/{id}</example>
        </member>
        <member name="M:Hospital_Project.Controllers.ResponseDataController.ListResponses">
            Objective: Create a method that allow us to return all responses from the database
             <summary>
             return all responses from the database
             </summary>
             <returns>List of responses in the database</returns>
             <example>GET: api/ResponseData/ListResponses</example>
        </member>
        <member name="M:Hospital_Project.Controllers.ResponseDataController.FindResponse(System.Int32)">
            Objective: Create a method that allow us to return the selected response by entering a interger value of the selected response id
             <summary>
             Return the selected the response from the database
             </summary>
             <param name="id">responseID</param>
             <return>The selected response</return>
            <example>GET: api/ResponseData/FindQuestion/{id}</example>
        </member>
        <member name="M:Hospital_Project.Controllers.ResponseDataController.UpdateResponse(System.Int32,Hospital_Project.Models.Response)">
            Objective: Create a method that allow us to access the selected response by entering a interger value of the selected response id
            Then Update the selected response with JSON form data of the response  model 
             <summary>
             Update the selected response  from the database
             </summary>
             <param name="id">response ID</param>
             <param name="response">response JSON form data</param>
             <returns>
             HEADER: 204 (Success, No Content Response)
             or
             HEADER: 400 (Bad Request)
             or
             HEADER: 404 (Not Found)
             </returns>
            <example>POST: api/ResponseData/UpdateQuestion/{id}</example>
        </member>
        <member name="M:Hospital_Project.Controllers.ResponseDataController.AddResponse(Hospital_Project.Models.Response)">
            Objective: Create a method that allow us to add a new response by JSON form data of the response model into the database 
             <summary>
             Add a new response into the database
             </summary>
             <param name="response">response JSON form data</param>
             <returns>
             HEADER: 204 (Success, No Content Response)
             or
             HEADER: 400 (Bad Request)
             </returns>
            <example>POST: api/ResponseData/AddQuestion</example>
        </member>
        <member name="M:Hospital_Project.Controllers.ResponseDataController.DeleteResponse(System.Int32)">
            Objective: Create a method that allow us to delete the selected response by entering a interger value of the selected response id
             <summary>
             Remove the selected the response from the database
             </summary>
             <param name="id">responseID</param>
             <returns>
             HEADER: 200 (OK)
             or
             HEADER: 404 (NOT FOUND)
             </returns>
            <example>POST: api/ResponseData/DeleteQuestion/{id}</example>
        </member>
        <member name="M:Hospital_Project.Controllers.SubscribedUserController.GetApplicationCookie">
            <summary>
            Grabs the authentication cookie sent to this controller.
            </summary>
        </member>
        <member name="M:Hospital_Project.Controllers.SurveyDataController.ListSurveys">
            Objective: Create a method that allow us to return all surveys from the database
             <summary>
             return all surveys from the database
             </summary>
             <returns>List of surveys in the database</returns>
             <example>GET: api/surveyData/ListSurveys</example>
        </member>
        <member name="M:Hospital_Project.Controllers.SurveyDataController.FindSurvey(System.Int32)">
            Objective: Create a method that allow us to return the selected survey by entering a interger value of the selected survey id
             <summary>
             Return the selected the survey from the database
             </summary>
             <param name="id">surveyID</param>
             <return>The selected survey</return>
            <example>GET: api/surveyData/Findsurvey/{id}</example>
        </member>
        <member name="M:Hospital_Project.Controllers.SurveyDataController.ListSurveysForQuestion(System.Int32)">
            Objective: Create a method that allow us to return all surveys that are related to the selected question
            by entering a interger value of the selected question id
             <summary>
             Return all surveys that are related to the selected question from the database
             </summary>
             <param name="id">questionID</param>
             <returns>List of surveys that are related to the selected question</returns>
            <example>GET: api/SurveyData/ListSurveysForQuestion</example>
        </member>
        <member name="M:Hospital_Project.Controllers.SurveyDataController.UpdateSurvey(System.Int32,Hospital_Project.Models.Survey)">
            Objective: Create a method that allow us to access the selected survey by entering a interger value of the selected survey id
            Then Update the selected survey with JSON form data of the survey  model 
             <summary>
             Update the selected survey from the database
             </summary>
             <param name="id">survey ID</param>
             <param name="survey ">survey  JSON form data</param>
             <returns>
             HEADER: 204 (Success, No Content Response)
             or
             HEADER: 400 (Bad Request)
             or
             HEADER: 404 (Not Found)
             </returns>
            <example>POST: api/surveyData/UpdateSurveys/{id}</example>
        </member>
        <member name="M:Hospital_Project.Controllers.SurveyDataController.AddSurvey(Hospital_Project.Models.Survey)">
            Objective: Create a method that allow us to add a new survey by JSON form data of the actor model into the database 
             <summary>
             Add a new survey into the database
             </summary>
             <param name="survey">survey JSON form data</param>
             <returns>
             HEADER: 204 (Success, No Content Response)
             or
             HEADER: 400 (Bad Request)
             </returns>
            <example>POST: api/SurveyrData/AddSurveys</example>
        </member>
        <member name="M:Hospital_Project.Controllers.SurveyDataController.DeleteSurvey(System.Int32)">
            Objective: Create a method that allow us to delete the selected Survey by entering a interger value of the selected Survey id
             <summary>
             Remove the selected the Survey from the database
             </summary>
             <param name="id">SurveyID</param>
             <returns>
             HEADER: 200 (OK)
             or
             HEADER: 404 (NOT FOUND)
             </returns>
            <example>POST: api/SurveyData/DeleteSurveys/{id}</example>
        </member>
        <member name="T:Hospital_Project.Models.ViewModels.GreetingCardDetails">
            <summary>
            view model for greeting card details
            </summary>
        </member>
        <member name="T:Hospital_Project.Models.ViewModels.GreetingCardList">
            <summary>
            Class to list all the greeting card details
            </summary>
        </member>
    </members>
</doc>
